.needs <std>
import { worker, makeShared } from "concurrency" under async;
import AsyncResult from "concurrency";
import { print } from "String" under str;
import string from "String";

private adr runLoadingBar(adr bar);

class LoadingBar {
	int max = max;
	mutable int resolution = resolution;
	private mutable int current = 0;
	private mutable bool kill = false;
	private mutable bool updated = true;
    private mutable AsyncResult result;
	private mutable bool started = false;
	private mutable bool finished = false;

	LoadingBar init(int max, * int resolution) {
		if resolution == 0 my.resolution = 20;
		return my;
	};

	void update() {
		my.current = my.current + 1;
		my.updated = true;
	};

	void print() {
		if !my.updated {
			return;
		};
		my.updated = false;

		// map current to resolution
		int current = my.current * my.resolution / my.max;
		
		mutable let strBuff = `\rLoading: [`;
		for int i = 0; i < my.resolution; i++ {
			if i < current {
				strBuff = `{strBuff}#`;
			} else {
				strBuff = `{strBuff} `;
			};
		};
		strBuff = `{strBuff}] {my.current * 100 / my.max}% `;
		str.print(strBuff);
		if my.current == my.max {
			my.finished = true;
		};
	};

	void kill() {
		my.kill = true;
        if my.started {
            my.result.kill();
			return;
        };
	};

	bool isKilled() {
		return my.kill;
	};

	bool isFinished() {
		return my.finished;
	};

    void run() {
		my.started = true;
        my.result = runLoadingBar(my);
    };
};

export LoadingBar createLoadingBar(int max, * int resolution) {
	return async.makeShared(LoadingBar, LoadingBar.init, max, resolution);
};

private AsyncResult runLoadingBar(LoadingBar bar) : async.worker {
	while true {
		if bar.isFinished() {
			break;
		};
		bar.print();
	};
	return "Done!";
};
